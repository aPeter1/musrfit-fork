#!/bin/bash

if [ ! -e /usr/bin/awk ]; then 
	echo Please make sure you have installed awk!
	exit 1
fi

if [ $# -lt 3 ] ; then

        cat <<EOFHELP

        "musrfit-mlog to db converter"

USAGE:   mlog2db FIRSTRUN# LASTRUN# BLABLA [noheader | fit-TEMPLATERUN# | -oDB_OUTPUT_FILE]
         OR
         mlog2db \[LIST OF RUNS\] BLABLA [noheader | fit-TEMPLATERUN# | -oDB_OUTPUT_FILE]

This small script converts subsequent musrfit output files (mlog) into one db file using bash/awk.

Example 1:
mlog2db 1423 1424 _ZF-LF-TF-supermeasurement
generates the db-file "out.db" (or whatever filename you specified with the -o option) from 1423_ZF-LF-TF-supermeasurement.mlog and 1424_ZF-LF-TF-supermeasurement.mlog .

Example 2:
mlog2db [1423 1425] _ZF-LF-TF-supermeasurement
generates the db-file "out.db" (or whatever filename you specified with the -o option) from 1423_ZF-LF-TF-supermeasurement.mlog and 1425_ZF-LF-TF-supermeasurement.mlog .

The output files in both examples above also include the db header.
In the case you are dealing with LEM-data AND have locally mounted the /mnt/data/nemu directory some available parameters like the 
temperature or transport settings will be taken from the summary files and added to the db-file.

If you want to generate a file without the header information just run the script with the option "noheader".

If you additionally want to fit some data using musrfit specify the option "fit-TEMPLATERUN#".
In this case either a mlog-outputfile or a msr-inputfile have to be present for the specified template run.
The subsequent inputfiles will be created.

Example 3:
mlog2db 200 220 _tf_h13 -oABC.db fit-199

This will fit the runs 200 to 220 using musrfit. The file 199_tf_h13.mlog (or if that is not available: 199_tf_h13.msr) is used as 
template for the first musrfit input file. The results of the fits will be written to ABC.db.


CAUTION:
The "indexing number" of the .mlog has to be at the begin of the filename.
Furthermore the data files that were fitted have to have the name "XXX_RUN#[_YYY]", where XXX,YYY are strings without whitespaces ("/" is OK).

If you want to use the fitting feature, musrfit has to be installed either on the PATH or in the working directory.

EOFHELP

else

export PATH=./:$PATH

SUMMDIR="/mnt/data/nemu/summ"

# In case a list of runs is given by [...]
if [ "${1:0:1}" == "[" ]; then 
  RUNARRAY=($@)
  if [ "$1" == "[" ]; then
    RUNARRAY[0]=""
  else
    RUNARRAY[0]=${RUNARRAY[0]#"["}
  fi
  tLen=${#RUNARRAY[@]}
  for (( i=0; i<${tLen}; i++ ));
  do
    if [ "$1" == "[" ]; then
      RUNARRAY[$i]=${RUNARRAY[ (( i + 1 )) ]}
    fi
    if [ "${RUNARRAY[$i]:(-1)}" == "]" ]; then
      if [ "${RUNARRAY[$i]}" == "]" ]; then
        RUNARRAY[$i]=""
        LASTRUN=$(( i - 1 ))
        EMPTYENTRY=1
      else
        RUNARRAY[$i]=${RUNARRAY[$i]%"]"}
        LASTRUN=$i
        EMPTYENTRY=0
      fi
    fi
#    echo ${RUNARRAY[$i]}
  done

  EXTENSION=${RUNARRAY[ (( LASTRUN + EMPTYENTRY + 1 )) ]}
  OPT_PAR_ONE=${RUNARRAY[ (( LASTRUN + EMPTYENTRY + 2 )) ]}
  OPT_PAR_TWO=${RUNARRAY[ (( LASTRUN + EMPTYENTRY + 3 )) ]}
  OPT_PAR_THREE=${RUNARRAY[ (( LASTRUN + EMPTYENTRY + 4 )) ]}

else # start and end-runs are given
  for (( j=0; j<=$2-$1; j++ ));
  do
    RUNARRAY[$j]=$(( $1 + $j ))
#    echo ${RUNARRAY[$j]}
  done
  LASTRUN=$(( $2 - $1 ))
  EXTENSION=$3
  OPT_PAR_ONE=$4
  OPT_PAR_TWO=$5
  OPT_PAR_THREE=$6
fi

# Check if fitting should be done
if [ "${OPT_PAR_ONE:0:3}" == "fit" ]; then
        TEMP=${OPT_PAR_ONE:4}
else if [ "${OPT_PAR_TWO:0:3}" == "fit" ]; then
        TEMP=${OPT_PAR_TWO:4}
else if [ "${OPT_PAR_THREE:0:3}" == "fit" ]; then
        TEMP=${OPT_PAR_THREE:4}
fi
fi
fi

if [ "$TEMP" != "" ]; then

# Check for musrfit on the PATH and if found continue with searching the fit-template

	PATHTOMUSRFIT=$(echo `which musrfit`)
	if [ "$PATHTOMUSRFIT" == "" ]; then
        	echo
		echo No musrfit executable was found on the PATH or in the current directory!
        	echo Please install musrfit first!
		echo
       		exit 1
	else

	if [ -e $TEMP$EXTENSION.mlog ]; then
		TEMPLATE=$TEMP$EXTENSION.mlog
	else if [ -e $TEMP$3.msr ]; then
		TEMPLATE=$TEMP$EXTENSION.msr
	fi
	fi
	fi
fi

for (( q=0; q<=${LASTRUN}; q++ ));
do
COUNT=${RUNARRAY[$q]}
NEXTCOUNT=${RUNARRAY[ (( q + 1 )) ]}
NEXTINPUT=$NEXTCOUNT$EXTENSION.msr
FIRSTINPUT=${RUNARRAY[0]}$EXTENSION.msr

if [ "$TEMP" != "" ]; then

	if [ "$TEMPLATE" == "" ]; then
		echo The specified musrfit template files $TEMP$3.mlog and $TEMP$3.msr do not exist!
		exit 1
	fi

	if [ "$COUNT" == "${RUNARRAY[0]}" ]; then
		awk -v count=$TEMP -v nextcount=${RUNARRAY[0]} -v nextinput=$FIRSTINPUT '{
                        if(NR==1) print nextcount > nextinput
                        else if($1 == "RUN") {
                                if (substr(count,1,1) != "_"){ count = sprintf("_%04u", count); nextcount = sprintf("_%04u", nextcount);}
                                sub(count, nextcount, $0);
                                print $0 >> nextinput
                        }
                        else print $0 >> nextinput
                }' $TEMPLATE
	fi
        
	musrfit $COUNT$EXTENSION.msr -k

	if [ "$NEXTCOUNT" != "${RUNARRAY[$LASTRUN]}" ]; then
		awk -v count=$COUNT -v nextcount=$NEXTCOUNT -v nextinput=$NEXTINPUT '{
			if(NR==1) print nextcount > nextinput
			else if($1 == "RUN") {
				if (substr(count,1,1) != "_"){ count = sprintf("_%04u", count); nextcount = sprintf("_%04u", nextcount);}
				sub(count, nextcount, $0);
				print $0 >> nextinput
			}
			else print $0 >> nextinput
		}' $COUNT$EXTENSION.mlog
	fi
fi

if [ ! -e $COUNT$EXTENSION.mlog ]; then
                echo The specified musrfit output file $COUNT$EXTENSION.mlog does not exist!
                exit 1
fi

if [ -d $SUMMDIR ]; then
RUNNUMBER=$( awk '{
		if(NR==1) X=0
		if($1 ~ /^RUN/ && X==0) {
			split($2, runNumber, "_")
			if(runNumber[1] ~ /lem/ && runNumber[2] != "his") {print runNumber[2] }
			if(runNumber[1] ~ /lem/ && runNumber[2] == "his") {print substr(runNumber[3],1,4) }
			X=1 
		}
	}' $COUNT$EXTENSION.mlog )

RUNYEAR=$( awk '{
                if(NR==1) X=0
                if($1 ~ /^RUN/ && X==0) {
                        split($2, runNumber, "_")
                        if(runNumber[1] ~ /lem/) {print substr(runNumber[1],length(runNumber[1])-1)}
			else print "XX"
			X=1
                }
        }' $COUNT$EXTENSION.mlog )

if [ "$RUNYEAR" != "XX" ]; then

SUMMFILE=$SUMMDIR/20$RUNYEAR/lem$RUNYEAR\_$RUNNUMBER.summ

TITLE=$( awk '{ if(NR==4) print $0 }' $SUMMFILE )

ENERGY=$( awk '{ if($0 ~ /implantation energy/) print $(NF-1)}' $SUMMFILE ) 

TEMPERATURE=$( awk '{ if($1 == "Sample_CF1") print $(NF-1)}' $SUMMFILE )

RALRAR=$( awk '{ if($5 == "RA-L") RAL=$7; if($1 == "RA-R") { RAR=$3; print RAL-RAR; nextfile } }' $SUMMFILE )

RATRAB=$( awk '{ if($5 == "RA-T") RAT=$7; if($1 == "RA-B") { RAB=$3; print RAT-RAB; nextfile } }' $SUMMFILE )

TRANSPORT=$( awk '{ if($1 == "Moderator") print $3}' $SUMMFILE )

fi

fi

awk -v optPARone=$OPT_PAR_ONE -v optPARtwo=$OPT_PAR_TWO -v optPARthree=$OPT_PAR_THREE '{  
	
	outfile="out.db"
	if(optPARone ~ /^-o/) outfile = substr(optPARone,3)
	if(optPARtwo ~ /^-o/) outfile = substr(optPARtwo,3)
	if(optPARthree ~ /^-o/) outfile = substr(optPARthree,3)

	FS = " "
        OFS = " "

	if(NR==1){title=$0; X=0; Y=0; i=1}

	if(NR>4){
                if(X == 0){
                        if($0 != ""){
                                parArray[i] = $2
				dataArray[i] = $3
				if($4 ~ /^-/) 
					negErrArray[i] = (-1.0)*$4
				else
					negErrArray[i] = $4
				
				if($5 ~ /none/)
					posErrArray[i] = $4
				else
					posErrArray[i] = $5
				i++                         
                        }
                        if($0 == "") X=1
		}
	}

	if($1 ~ /^RUN/ && X==1){ split($2, runNumber, "_"); X=2 }	
	
	if($1 ~ /^chi/ && X==2){
		parArray[i] = "CHISQ"
                parArray[i+1] = "NDF"
                parArray[i+2] = "CHISQred"
                parArray[i+3] = "RUN"

		sub(/,/, "", $3); sub(/,/, "", $6);

		dataArray[i] = $3
                dataArray[i+1] = $6
                dataArray[i+2] = $9
		
		for (j in runNumber) {
			if ( runNumber[j] ~ /^0/ ) {
				sub(/0+/, "", runNumber[j])
			}
			if (int(runNumber[j]) == runNumber[j]) {
				dataArray[i+3] = runNumber[j]
				break
			}
			else dataArray[i+3] = "0000"
		}

		negErrArray[i] = ""
                negErrArray[i+1] = ""
                negErrArray[i+2] = ""
                negErrArray[i+3] = ""

		posErrArray[i] = ""
                posErrArray[i+1] = ""
                posErrArray[i+2] = ""
                posErrArray[i+3] = ""	

	
# Output to file in the case, the LEM summary file is accessible

		if("'"$TEMPERATURE"'" != "") {

			if("'"$COUNT"'" == "'"${RUNARRAY[0]}"'" && optPARone != "noheader" && optPARtwo != "noheader" && optPARthree != "noheader"){
				print "TITLE" >> outfile
        			print ">>>Put your title here<<<\n" >> outfile
        			print "Abstract" >> outfile
        			print ">>>Put your abstract here<<<\n" >> outfile
        			print "LABELS" >> outfile
				print "T [K]" >> outfile
				print "Tr [kV]" >> outfile
				print "E [keV]" >> outfile
				print "RAL-RAR [kV]" >> outfile
				print "RAT-RAB [kV]" >> outfile
				
				for(k=1;k<i+4;k++){
					print parArray[k] >> outfile
				}

				$1 = "Data"
				$2 = "T"
				$3 = "Tr"
				$4 = "E"
				$5 = "RALRAR"
				$6 = "RATRAB"
				for(k=1;k<i+4;k++){
					$(k+6)=parArray[k]
				}
				print "\n" $0 >> outfile
				print "\\-e" >> outfile
			}

			print "T = " "'"$TEMPERATURE"'" ",,,\\" >> outfile
			print "Tr = " "'"$TRANSPORT"'" ",,,\\" >> outfile
			if ("'"$ENERGY"'" != "") print "E = " "'"$ENERGY"'" ",,,\\" >> outfile
			else print "E = -999,,,\\" >> outfile
			if ("'"$RALRAR"'" != "") print "RALRAR = " "'"$RALRAR"'" ",,,\\" >> outfile	
			else print "RALRAR = -999,,,\\" >> outfile
			if ("'"$RATRAB"'" != "") print "RATRAB = " "'"$RATRAB"'" ",,,\\" >> outfile
			else print "RATRAB = -999,,,\\" >> outfile

			for(l=1;l<i+3;l++){
				print parArray[l] " = " dataArray[l] ", " posErrArray[l] ", " negErrArray[l] ",\\" >> outfile
			}

			print dataArray[i+3] ",,, " "'"$TITLE"'" >> outfile
		
			if("'"$COUNT"'" == "'"${RUNARRAY[$LASTRUN]}"'") print "\n" >> outfile

		}

# If we do not have the information from the summary file

		else {
			if("'"$COUNT"'" == "'"${RUNARRAY[0]}"'" && optPARone != "noheader" && optPARtwo != "noheader" && optPARthree != "noheader"){
                                print "TITLE" >> outfile
                                print ">>>Put your title here<<<\n" >> outfile
                                print "Abstract" >> outfile
                                print ">>>Put your abstract here<<<\n" >> outfile
                                print "LABELS" >> outfile
				print "T [K]" >> outfile
				
                                for(k=1;k<i+4;k++){
                                        print parArray[k] >> outfile
                                }

                                $1 = "Data"
				$2 = "T"
                                for(k=1;k<i+4;k++){
                                        $(k+2)=parArray[k]
                                }
                                print "\n" $0 >> outfile
                                print "\\-e" >> outfile
                        }

			print "T = 000,,,\\" >> outfile

                        for(l=1;l<i+3;l++){
                                print parArray[l] " = " dataArray[l] ", " posErrArray[l] ", " negErrArray[l] ",\\" >> outfile
                        }

                        print dataArray[i+3] ",,, " title >> outfile

                        if("'"$COUNT"'" == "'"${RUNARRAY[LASTRUN]}"'") print "\n" >> outfile


		}

	}
}' $COUNT$EXTENSION.mlog

done

fi
